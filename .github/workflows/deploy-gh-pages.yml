name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main  # Set this to your default branch

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Setup Node.js 🔧
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'      
      
      - name: Install Dependencies 📦
        run: npm ci --legacy-peer-deps
        # --legacy-peer-deps is used to avoid peer dependency issues with Next.js

      # Add a check for next.config.js
      - name: Check Next.js config
        run: |
          if [ -f "next.config.js" ]; then
            echo "Found next.config.js - checking configuration:"
            cat next.config.js
            echo "Ensuring output: 'export' is set correctly for static site generation"
          else
            echo "Warning: next.config.js not found, creating basic configuration"
            echo "/** @type {import('next').NextConfig} */
            const nextConfig = {
              output: 'export',
              images: { unoptimized: true },
              basePath: '/precek',
              trailingSlash: true,
            }
            module.exports = nextConfig" > next.config.js
          fi

      - name: Build Next.js app
        run: npm run build
        env:
          # Pass the secret to the build process
          NEXT_PUBLIC_OPENROUTER_API_KEY: ${{ secrets.NEXT_PUBLIC_OPENROUTER_API_KEY }}
          # Ensure NEXT_PUBLIC_OPENAI_API_KEY is also passed if needed for build
          # NEXT_PUBLIC_OPENAI_API_KEY: ${{ secrets.NEXT_PUBLIC_OPENAI_API_KEY }}

      # Add debug info about the output directory
      - name: Debug output directory
        run: |
          echo "Output directory contents:"
          ls -la ./out
          echo "Total size of output directory:"
          du -sh ./out
          echo "Largest files in output:"
          find ./out -type f -exec du -h {} \; | sort -rh | head -n 10

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out
          
      # Add timeout to deployment to avoid hanging
      - name: Deploy 🚀
        id: deployment
        uses: actions/deploy-pages@v4
        timeout-minutes: 10
        
      - name: Output deployment URL
        run: echo "Deployed to ${{ steps.deployment.outputs.page_url }}"
        
      # Add troubleshooting for stuck deployments
      - name: Troubleshooting info
        if: always()
        run: |
          echo "If deployment is stuck in 'syncing_files' status:"
          echo "1. Check GitHub status at https://www.githubstatus.com/"
          echo "2. Verify repository settings have GitHub Pages enabled"
          echo "3. Try a smaller build by removing unused assets"
          echo "4. You may need to manually cancel the stuck deployment in GitHub Actions"